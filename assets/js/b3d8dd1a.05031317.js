(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{208:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(3),r=t(7),o=(t(0),t(263)),i={title:"Defining Workload Types"},p={unversionedId:"platform-builder-guide/using-cue/workload-type",id:"platform-builder-guide/using-cue/workload-type",isDocsHomePage:!1,title:"Defining Workload Types",description:"In this section, we will introduce more examples of using CUE to define workload types.",source:"@site/docs/platform-builder-guide/using-cue/workload-type.md",slug:"/platform-builder-guide/using-cue/workload-type",permalink:"/docs/next/platform-builder-guide/using-cue/workload-type",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/platform-builder-guide/using-cue/workload-type.md",version:"current",sidebar:"docs",previous:{title:"Learning CUE",permalink:"/docs/next/platform-builder-guide/using-cue/basic"},next:{title:"Defining Traits",permalink:"/docs/next/platform-builder-guide/using-cue/trait"}},c=[{value:"Basic Usage",id:"basic-usage",children:[]},{value:"Context",id:"context",children:[]},{value:"Composition",id:"composition",children:[]}],l={toc:c};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this section, we will introduce more examples of using CUE to define workload types."),Object(o.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(o.b)("p",null,"The very basic usage of CUE in workload is to extend a Kubernetes resource as a workload type(via ",Object(o.b)("inlineCode",{parentName:"p"},"WorkloadDefinition"),") and expose configurable parameters to users."),Object(o.b)("p",null,"A Deployment as workload type:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1alpha2\nkind: WorkloadDefinition\nmetadata:\n  name: worker\nspec:\n  definitionRef:\n    name: deployments.apps\n  schematic:\n    cue:\n      template: |\n        parameter: {\n            name:  string\n            image: string\n        }\n        output: {\n            apiVersion: "apps/v1"\n            kind:       "Deployment"\n            spec: {\n                selector: matchLabels: {\n                    "app.oam.dev/component": parameter.name\n                }\n                template: {\n                    metadata: labels: {\n                        "app.oam.dev/component": parameter.name\n                    }\n                    spec: {\n                        containers: [{\n                            name:  parameter.name\n                            image: parameter.image\n                        }]\n                    }}}\n        }\n')),Object(o.b)("p",null,"A Job as workload type:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1alpha2\nkind: WorkloadDefinition\nmetadata:\n  name: task\n  annotations:\n    definition.oam.dev/description: "Describes jobs that run code or a script to completion."\nspec:\n  definitionRef:\n    name: jobs.batch\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "batch/v1"\n            kind:       "Job"\n            spec: {\n                parallelism: parameter.count\n                completions: parameter.count\n                template: spec: {\n                    restartPolicy: parameter.restart\n                    containers: [{\n                        image: parameter.image\n                        if parameter["cmd"] != _|_ {\n                            command: parameter.cmd\n                        }\n                    }]\n                }\n            }\n        }\n        parameter: {\n            count:   *1 | int\n            image:   string\n            restart: *"Never" | string\n            cmd?: [...string]\n        }\n')),Object(o.b)("h2",{id:"context"},"Context"),Object(o.b)("p",null,"When you want to reference the runtime instance name for an app, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"conext")," keyword to define ",Object(o.b)("inlineCode",{parentName:"p"},"parameter"),"."),Object(o.b)("p",null,"KubeVela runtime provides a ",Object(o.b)("inlineCode",{parentName:"p"},"context")," struct including app name(",Object(o.b)("inlineCode",{parentName:"p"},"context.appName"),") and component name(",Object(o.b)("inlineCode",{parentName:"p"},"context.name"),")."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cue"},"context: {\n  appName: string\n  name: string\n}\n")),Object(o.b)("p",null,"Values of the context will be automatically generated before the underlying resources are applied.\nThis is why you can reference the context variable as value in the template."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"parameter: {\n    image: string\n}\noutput: {\n  ...\n    spec: {\n        containers: [{\n            name:  context.name\n            image: parameter.image\n        }]\n    }\n  ...\n}\n")),Object(o.b)("h2",{id:"composition"},"Composition"),Object(o.b)("p",null,"A workload type can contain multiple Kubernetes resources, for example, we can define a ",Object(o.b)("inlineCode",{parentName:"p"},"webserver")," workload type that is composed by Deployment and Service."),Object(o.b)("p",null,"Note that in this case, you MUST define the template of component instance in ",Object(o.b)("inlineCode",{parentName:"p"},"output")," section, and leave all the other templates in ",Object(o.b)("inlineCode",{parentName:"p"},"outputs")," with resource name claimed. The format MUST be ",Object(o.b)("inlineCode",{parentName:"p"},"outputs:<unique-name>:<full template>"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This is how KubeVela know which resource is the running instance of the application component.")),Object(o.b)("p",null,"Below is the example: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1alpha2\nkind: WorkloadDefinition\nmetadata:\n  name: webserver\n  annotations:\n    definition.oam.dev/description: "webserver is a combo of Deployment + Service"\nspec:\n  definitionRef:\n    name: deployments.apps\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "apps/v1"\n            kind:       "Deployment"\n            spec: {\n                selector: matchLabels: {\n                    "app.oam.dev/component": context.name\n                }\n                template: {\n                    metadata: labels: {\n                        "app.oam.dev/component": context.name\n                    }\n                    spec: {\n                        containers: [{\n                            name:  context.name\n                            image: parameter.image\n\n                            if parameter["cmd"] != _|_ {\n                                command: parameter.cmd\n                            }\n\n                            if parameter["env"] != _|_ {\n                                env: parameter.env\n                            }\n\n                            if context["config"] != _|_ {\n                                env: context.config\n                            }\n\n                            ports: [{\n                                containerPort: parameter.port\n                            }]\n\n                            if parameter["cpu"] != _|_ {\n                                resources: {\n                                    limits:\n                                        cpu: parameter.cpu\n                                    requests:\n                                        cpu: parameter.cpu\n                                }\n                            }\n                        }]\n                }\n                }\n            }\n        }\n        // an extra template\n        outputs: service: {\n            apiVersion: "v1"\n            kind:       "Service"\n            spec: {\n                selector: {\n                    "app.oam.dev/component": context.name\n                }\n                ports: [\n                    {\n                        port:       parameter.port\n                        targetPort: parameter.port\n                    },\n                ]\n            }\n        }\n        parameter: {\n            image: string\n            cmd?: [...string]\n            port: *80 | int\n            env?: [...{\n                name:   string\n                value?: string\n                valueFrom?: {\n                    secretKeyRef: {\n                        name: string\n                        key:  string\n                    }\n                }\n            }]\n            cpu?: string\n        }\n')),Object(o.b)("p",null,"Please save the example as file ",Object(o.b)("inlineCode",{parentName:"p"},"webserver.yaml"),", then register the new workload to kubevela."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f webserver.yaml\n")),Object(o.b)("p",null,"Next, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"webserver")," type workload in our application, below is the example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1alpha2\nkind: Application\nmetadata:\n  name: webserver-demo\n  namespace: default\nspec:\n  components:\n    - name: hello-world\n      type: webserver\n      settings:\n        image: crccheck/hello-world\n        port: 8000\n        env:\n        - name: "PORT"\n          value: "8000"\n        cpu: "100m"\n')),Object(o.b)("p",null,"Please save the Application example as file ",Object(o.b)("inlineCode",{parentName:"p"},"app.yaml"),", then create the new Application."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f app.yaml\n")),Object(o.b)("p",null,"Wait for a while until the status of Application is ",Object(o.b)("inlineCode",{parentName:"p"},"running"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},'$ kubectl get application webserver-demo -o yaml\napiVersion: core.oam.dev/v1alpha2\nkind: Application\nmetadata:\n  name: webserver-demo\n  namespace: default\n  ...\nspec:\n  components:\n  - name: hello-world\n    settings:\n      cpu: 100m\n      env:\n      - name: PORT\n        value: "8000"\n      image: crccheck/hello-world\n      port: 8000\n    type: webserver\nstatus:\n  components:\n  - apiVersion: core.oam.dev/v1alpha2\n    kind: Component\n    name: hello-world\n  ...\n  services:\n  - healthy: true\n    name: hello-world\n  status: running\n')),Object(o.b)("p",null,"In the K8s cluster, you will see the following resources are created:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deployment\nNAME             READY   UP-TO-DATE   AVAILABLE   AGE\nhello-world-v1   1/1     1            1           15s\n\n$ kubectl get svc\nNAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nhello-world-trait-7bdcff98f7   ClusterIP   <your ip>       <none>        8000/TCP   32s\n")))}s.isMDXComponent=!0},263:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),s=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=s(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=s(t),b=a,d=m["".concat(i,".").concat(b)]||m[b]||u[b]||o;return t?r.a.createElement(d,p(p({ref:n},l),{},{components:t})):r.a.createElement(d,p({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);